#+OPTIONS: date:nil title:nil toc:nil author:nil
#+STARTUP: overview
#+BEGIN_HTML
<h1 align="center">NaTour</h1>

<div align="center">

  <!-- License -->
  <a href="https://github.com/luftmensch-luftmensch/Progetto-NaTour/blob/main/LICENSE"
          ><img
              src="https://img.shields.io/badge/License-GPL_v3-blue.svg?style=for-the-badge&color=red"
              alt="License"
      /></a>

  <!-- Android -->
  <a href="https://github.com/luftmensch-luftmensch/Progetto-NaTour/tree/main/NaTour/"
          ><img
              src="https://img.shields.io/badge/Android-3DDC84?style=for-the-badge&logo=android&logoColor=white"
              alt="Powered by Android"
      /></a>
</div>
#+END_HTML
[[file:res/Title.png]]
* About
#+html: <p align="center" ><img src="./res/NaTour.png"  width=250px height=250px  /></p>

NaTour is a moder social network for hiking enthusiasts based on an client-server architecture
* Features
+ Google & Facebook authentication + local authentication using [[https://developer.android.com/training/data-storage/room/][ROOM]];
+ Firebase analytics;
+ Chatting capabilities;
+ View, search & star hiking paths (also using OSM);
+ A Personal customizable profile;
* Dependencies
** Frontend w/ Android using Java
+ Amplify (in order to have Google & Facebook support);
+ OSM;
+ Glide & ImageSlideShow;
+ RX-Java.
** Backend w/ Springboot
+ [[https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web][Spring Boot Started Web]] in order to create REST API;
+ [[https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa][JPA]] for Database (Postgresql);
+ [[https://mvnrepository.com/artifact/org.projectlombok/lombok][Lombok annotation]] to avoid class polluting;
+ [[https://mvnrepository.com/artifact/org.modelmapper/modelmapper][ModelMapper]] for Entity =<-->= DTO conversion.
*** Dockerization
The server offer a way to dockerize the Database in order to reduce the difficulty of the configuration.

Below is provided the ~docker-compose.yml~ file:
#+begin_src bash
# A Docker Compose must always start with the version tag.
# We use '3' because it's the last version.
version: '3'

# You should know that Docker Compose works with services.
# 1 service = 1 container.
# For example, a service, a server, a client, a database...
# We use the keyword 'services' to start to create services.
services:
  # The name of our service is "database"
  # but you can use the name of your choice.
  # Note: This may change the commands you are going to use a little bit.
  database:
    # Official Postgres image from DockerHub (we use the last version)
    image: 'postgres:latest'
    container_name: 'pg_db'
    volumes:
      - ./db-data/:/var/lib/postgresql/data/

    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - 5432:5432

    environment:
      POSTGRES_USER: <TODO> # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: <TODO> # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: <TODO> # The PostgreSQL default database
#+end_src
