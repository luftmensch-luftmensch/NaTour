% Piccola guida:

% I commenti iniziano con %

% La struttura è la seguente @A{B, X} dove @A è l'entry type (useremo @BOOK per questo documento), B è la citekey (deve essere univoca), e X sono tutti i parametri
% Nel caso di book sono editor, title, publisher, year, volume, number, series, address, edition, month, note, annote
% Di seguito un template minimale
@BOOK{TEMPLATE,
  editor    = "",
  title     = "",
  publisher = "",
  year      = "",
  volume    = "",
  number    = "",
  series    = "",
  address   = "",
  edition   = "",
  month     = "",
  note      = "",
  annote    = ""
}

@BOOK{utentiEspertiNelSettore,
    TITLE="Per questo tipo di utenti facciamo affidamento a persone che praticano assiduamente questo sport"
}

@BOOK{utentiEspertiApplicativo,
    TITLE="Per questo tipo di utenti facciamo affidamento ai nostri colleghi universitari",
}

@BOOK{utentiNonEsperti,
      TITLE="Per questo tipo di utenti abbiamo deciso di fare uso dei nostri genitori ed amici"
}

@BOOK{requisitiFunzionali,
      TITLE="Si intendono quei requisiti che descrivono le funzionalità offerte dal sistema"
}

@BOOK{requisitiNonFunzionali,
      TITLE="Sono quelli che descrivono i vincoli sui servizi offerti dal sistema e sullo stesso processo di sviluppo"

}

@BOOK{demografici,
      TITLE="Ovvero età, genere, settore di occupazione, livello di istruzione, redditi, stile di vita"
}

@BOOK{geolocalizzazione,
      TITLE="È importante restringere l’area geografica di utilizzo dell’applicazione per l’individuazione di un target più coerente con la realtà"
}

@BOOK{opinioni,
      TITLE="Si intendono informazioni sugli interessi, sul tempo libero, sport, hobby, oppure informazioni su opinioni riguardo la sostenibilità e la tutela ambientale"
}

@BOOK{caratteristicheIndividuali,
      TITLE="Ovvero le qualità che descrivono una persona quali la cultura, le abitudini o le preferenze oltre alla lingua, l’etnia e così via"
}

@BOOK{personas,
      TITLE="Parliamo quindi delle cosiddette Personas, un modello inferenziale, basate su previsioni, che generano meta-persone $\rightarrow$ Raccolte che clusterizzano una parte del nostro target (generalizzazione di un nostro possibile utente)."
}

@BOOK{framework,
      TITLE="Architettura logica di supporto di supporto, sul quale un software può essere progettato e realizzato, spesso facilitandone lo sviluppo da parte del programmatore"
}

@BOOK{container,
      TITLE="Per una certezza, quasi matematica, di una corretta esecuzione, indipendente dalla macchina che fa girare il programma, utilizziamo un docker container $\rightarrow$ Un'unità di software che pacchettizza codice e tutte le sue dipendenze per una deploy sicuro e affidabile"
}

@BOOK{postgres,
      TITLE="Un DBMS (Database Management System) ad oggetti completo"
}

@BOOK{targetUtenti,
      TITLE="Ricordiamo infatti che è sulla piattaforma potrebbero anche inscriversi minori"
}

@BOOK{macchineVirtuali,
      TITLE="Un software che, attraverso un processo di virtualizzazione, crea un ambiente virtuale che emula tipicamente il comportamento di una macchina fisica  grazie all'assegnazione di risorse hardware  e in cui alcune applicazioni possono essere eseguite come se interagissero con tale macchina"
}

@BOOK{serviziEsterni,
      TITLE="Per servizi esterni si intendo quelle piattaforme come Google che mettono a disposizione la possibilità di autenticarsi in un click" 
}

@BOOK{sequenceDiagram,
      TITLE="Descrivono la collaborazione di un gruppo di oggetti che devono implementare collettivamente un comportamento" 
}

@BOOK{activityDiagrams,
      TITLE="Mostrano le attività e i cambiamenti da un' attività all' altra con gli eventi che accadono in qualche parte del sistema" 
}

@BOOK{JAVA,
      TITLE="Linguaggio Object Oriented che ha permesso un rapido sviluppo degli applicativi richiesti" 
}

@BOOK{POOL,
      TITLE="Si intende una collezione di risorse che vengono conservate in modo da essere utilizzate nell'immediato. Nel nostro caso questa collezione corrisponde ad un bacino di dati di utenti e admin" 
}

@BOOK{ambienteDiSviluppo,
      TITLE="Conosciuti anche come IDE. Sono software che, in fase di programmazione, supporta i programmatori nello sviluppo e debugging del codice sorgente di un programma" 
}

@BOOK{COGNITO,
      TITLE="Servizio che mette a disposizione delle API e un infrastruttura per la gestione delle chiavi utente (come autenticazione, autorizzazione e registrazione)" 
}

@BOOK{RESTAPI,
      TITLE="Nota anche come API RESTful, rappresenta uno scambio di risorse nel loro stato rappresentativo"
}

@BOOK{testingProblem,
      TITLE="Si vuole a tutti i costi evitare di lanciare sul mercato prodotti non funzionanti o con grosse problematicità"
}

@BOOK{informazioniRepository,
      TITLE="Potrebbe non essere accessibile a tutti (il repository è per privacy privato)"
}

@BOOK{JUNIT,
      TITLE="Framework di unit testing per il linguaggio di programmazione Java"
}

@BOOK{JUNITMOCK,
      TITLE="Gli unit test si concentrano su un particolare pezzo di codice che deve essere esercitato. Nella maggior parte dei casi, questo codice si basa su dipendenze esterne. Tali dipendenze devono essere controllate, in modo tale che solo il codice sotto testing sia effettivamente testato. La rimozione delle dipendenze viene eseguita con l'introduzione delle classi Mock, che le simulano"
}

@BOOK{BlackBox,
      TITLE="Testing basato sulle specifiche del programma e sulla conoscenza delle sole funzionalità e sulla ricerca dell’affidabilità e dell’efficienza"
}

@BOOK{LockIn,
      TITLE="È la situazione in cui il costo del passaggio a un fornitore diverso è così elevato che il cliente è essenzialmente bloccato con il fornitore originale. A causa delle pressioni finanziarie, di una forza lavoro insufficiente o della necessità di evitare interruzioni delle operazioni aziendali, il cliente è bloccato in quello che potrebbe essere un prodotto o un servizio inferiore"
}

@BOOK{DimGer,
      TITLE="Per una visualizzazione migliore delle immagini è possibile accedere alle immagini originali, dal codice sorgente hostato su github (Si faccia riferimento al paragrafo 4 - Codice sorgente sviluppato)"
}

@BOOK{STATOBACKEND,
      TITLE="Per una visione più dettagliata si facci riferimento alla javadoc prodotta in allegato al documento"
}

@BOOK{STATOFRONTEND,
      TITLE="Si noti che la vista risulta diversa, per la diversa implementazione del design pattern architetturale"
}

@BOOK{SINGLETON,
      TITLE="Ha lo scopo di garantire che di una determinata classe venga creata una e una sola istanza, e di fornire un punto di accesso globale a tale istanza"
}

@BOOK{EMBEDDED,
      TITLE="Identifica genericamente un sistema progettato appositamente per un determinato utilizzo (special purpose), spesso con una piattaforma hardware ad hoc, integrati nel sistema che controllano e in grado di gestirne tutte o parte delle funzionalità richieste"
}

@BOOK{AMPLIFY,
      TITLE="Consiste in un set di strumenti e caratteristiche appositamente progettati per consentire agli sviluppatori front-end di applicazioni Web e per dispositivi mobili di costruire rapidamente e facilmente applicazioni full-stack in AWS, con la flessibilità di sfruttare i vari servizi AWS man mano che i casi d'uso si evolvono"
}